/**
 * This script add `androidJavadocs` and `androidJavadocsJar` etc. tasks to project
 */

// we applied by external `build.gradle`, so file() method returns related path;
// here, we need dir of this script file
def AR_LOCAL_PATH = buildscript.sourceFile.parentFile

apply from: new File(AR_LOCAL_PATH, 'androidrubick.release.config.gradle')

// define operations to upload java / android sources and docs
afterEvaluate { project ->
    if (isAndroidProject(project)) {
        ARLog('process android library')

        // see https://mbcdev.com/2015/02/18/building-javadocs-for-android-library-projects-with-gradle/
        android.libraryVariants.all { variant ->
            // find `release`, add sources
            if (variant.name == 'release') {
                ARLog("get java compile source & classpaths of release variant")
                def androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
                project.ext.AR_EXTRAS.JAVADOC_SOURCES = variant.javaCompile.source
                project.ext.AR_EXTRAS.JAVADOC_CLASSPATHS = files(variant.javaCompile.classpath.files) + files(androidJar)
                ARLog("AR_EXTRAS.JAVADOC_CLASSPATHS : $AR_EXTRAS.JAVADOC_CLASSPATHS.files")
            }
        }

        task install(type: Upload, dependsOn: assemble) {
            repositories.mavenInstaller {
                configuration = configurations.archives

                ARConfigPom(pom)
            }
        }

        task androidJavadocs(type: Javadoc) {
            source = AR_EXTRAS.JAVADOC_SOURCES ? AR_EXTRAS.JAVADOC_SOURCES : android.sourceSets.main.java.source
            classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
            if (AR_EXTRAS.JAVADOC_CLASSPATHS) {
                classpath += AR_EXTRAS.JAVADOC_CLASSPATHS
            }

            options {
                // set locale, use default now
                // locale = 'en_US'
                // set encoding / charset
                encoding AR_EXTRAS.PROJECT_ENCODING
                charSet AR_EXTRAS.PROJECT_ENCODING
                links "http://docs.oracle.com/javase/7/docs/api/"
                links Locale.default.language == 'zh' ? "http://www.android-doc.com/reference/" : "http://d.android.com/reference/"
            }
//            options.encoding = AR_PROJECT_ENCODING
//            options.charSet = AR_PROJECT_ENCODING
//            options.links("http://docs.oracle.com/javase/7/docs/api/")
//            options.links("http://d.android.com/reference/")
            // see https://mbcdev.com/2015/02/18/building-javadocs-for-android-library-projects-with-gradle/
            // options.linksOffline("http://d.android.com/reference", "${android.sdkDirectory}/docs/reference");

            // We're not excluding these generated files currently
            // exclude '**/BuildConfig.java'
            // exclude '**/R.java'
        }

        task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
            classifier = 'javadoc'
            from androidJavadocs.destinationDir
        }

        task androidSourcesJar(type: Jar) {
            classifier = 'sources'
            from android.sourceSets.main.java.source
        }
    } else {
        ARLog('no com.android.application or com.android.library')

        install {
            repositories.mavenInstaller {
                ARConfigPom(pom)
            }
        }

        task sourcesJar(type: Jar, dependsOn:classes) {
            classifier = 'sources'
            from sourceSets.main.allSource
        }

        task javadocJar(type: Jar, dependsOn:javadoc) {
            classifier = 'javadoc'
            from javadoc.destinationDir
        }
    }

    // java doc add option if is java 8 or over
    if (JavaVersion.current().isJava8Compatible()) {
        allprojects {
            tasks.withType(Javadoc) {
                options.addStringOption('Xdoclint:none', '-quiet')
            }
        }
    }

    // artifacts add source jars
    artifacts {
        if (isAndroidProject(project)) {
            archives androidSourcesJar
            archives androidJavadocsJar
        } else {
            archives sourcesJar
            archives javadocJar
        }
    }
}

